FILES = \
	Gappa_common.v \
	Gappa_decimal.v \
	Gappa_definitions.v \
	Gappa_dyadic.v \
	Gappa_fixed.v \
	Gappa_float.v \
	Gappa_library.v \
	Gappa_obfuscate.v \
	Gappa_pred_abs.v \
	Gappa_pred_bnd.v \
	Gappa_pred_fixflt.v \
	Gappa_pred_nzr.v \
	Gappa_pred_rel.v \
	Gappa_real.v \
	Gappa_rewriting.v \
	Gappa_round_aux.v \
	Gappa_round_def.v \
	Gappa_round.v \
	Gappa_tactic.v \
	Gappa_tree.v \
	Gappa_user.v

OBJS = $(addprefix src/,$(addsuffix o,$(FILES)))

.PHONY: all check clean dist install

all: $(OBJS)

clean: src/clean testsuite/clean

check: testsuite/check

Remakefile: Remakefile.in config.status
	./config.status Remakefile

configure config.status: configure.in
	autoconf
	./config.status --recheck

%.vo: %.v
	@COQDEP@ -R src Gappa -I src $< | @REMAKE@ -r $@
	@COQC@ @COQEXTRAFLAGS@ -R src Gappa -I src $<

COQSUBTREES = clib engine kernel interp intf lib library ltac parsing pretyping printing proofs tactics toplevel vernac plugins/ltac
COQINCLUDES = $(addprefix -I "@COQLIB@"/, $(COQSUBTREES)) @BIGINTINCLUDE@

src/gappatac.ml: src/gappatac.c
	@CPP@ -DCOQVERSION=@COQVERSION@ $< -o $@

src/gappatac.cmo: src/gappatac.ml
	@OCAMLC@ -rectypes $(COQINCLUDES) -c $< -o $@

src/gappatac.cmxs: src/gappatac.ml
	@OCAMLOPT@ -rectypes $(COQINCLUDES) -shared $< -o $@

MLTARGETS = $(addprefix src/, @TACTIC_TARGETS@)

src/Gappa_tactic.vo: src/Gappa_tactic.v $(MLTARGETS)
	@COQDEP@ -R src Gappa -I src $< | @REMAKE@ -r $@
	@COQC@ @COQEXTRAFLAGS@ @TACTIC_PARAM@ -R src Gappa -I src $<

src/clean:
	rm -f $(OBJS)
	cd src
	rm -f gappatac.ml gappatac.cmi gappatac.cmo gappatac.cmx gappatac.cmxs gappatac.o *.glob *.vos *.vok

testsuite/check: src/Gappa_tactic.vo
	set +e
	cd testsuite
	logfile="failures-`date '+%Y-%m-%d'`.log"
	cat /dev/null > log.tmp
	cat /dev/null > "$logfile"
	for f in *.v; do
	  cp "$f" check_tmp.v
	  @COQC@ -R ../src Gappa -I ../src check_tmp.v > output.tmp 2>&1
	  return_code=$?
	  if [ ${return_code} -ne 0 ]; then
	    (echo "*** $f exited with error code ${return_code}"; cat output.tmp; echo) >> "$logfile"
	    echo "$f exited with error code ${return_code}" >> log.tmp
	  fi
	  rm -f check_tmp.v check_tmp.vo check_tmp.glob output.tmp
	done
	return_code=0
	if [ -s log.tmp ]; then
	  echo "*** Failures:"
	  cat log.tmp
	  return_code=1
	else
	  rm "$logfile"
	fi
	rm log.tmp
	exit ${return_code}

testsuite/clean:
	rm -f testsuite/failures-*.log

install:
	prefix=@prefix@
	exec_prefix=@exec_prefix@
	mkdir -p @libdir@
	cp $(OBJS) $(MLTARGETS) @libdir@

EXTRA_DIST = \
	configure

dist: $(EXTRA_DIST)
        PACK=@PACKAGE_TARNAME@-@PACKAGE_VERSION@
        rm -f $PACK.tar.gz
        git archive --format=tar --prefix=$PACK/ -o $PACK.tar HEAD
        tar rf $PACK.tar --transform="s,^,$PACK/," --mtime="`git show -s --format=%ci`" $(EXTRA_DIST)
        gzip -n -f --best $PACK.tar
