AC_INIT([Coq support library for Gappa], [1.4.5],
        [Guillaume Melquiond <guillaume.melquiond@inria.fr>],
        [gappalib-coq])

m4_divert_push(99)
if test "$ac_init_help" = "long"; then
  ac_init_help=short
fi
m4_divert_pop(99)

AC_DEFUN([AX_VERSION_GE], [AS_VERSION_COMPARE([$1],[$2],[$4],[$3],[$3])])

AC_PROG_CPP

native_tactic=yes
byte_tactic=yes

AC_ARG_VAR(COQBIN, [path to Coq executables [empty]])
if test ${COQBIN##*/}; then COQBIN=$COQBIN/; fi

AC_SUBST(COQVERSION)

AC_ARG_VAR(COQC, [Coq compiler command [coqc]])
AC_MSG_CHECKING([for coqc >= 8.8])
if test ! "$COQC"; then COQC=`which ${COQBIN}coqc`; fi
COQVERSION=[`$COQC -v | sed -n -e 's/^.*version \([0-9][0-9.]*\).*$/\1/p' | awk -F. '{ printf("%d%02d%02d\n", $1,$2,$3); }'`]
AX_VERSION_GE([$COQVERSION], [80800],
  [ AC_MSG_RESULT([$COQC]) ],
  [ AC_MSG_RESULT([no])
    AC_MSG_ERROR([ *** Unable to find Coq (http://coq.inria.fr/)]) ])

AC_ARG_VAR(COQDEP, [Coq dependency analyzer command [coqdep]])
AC_MSG_CHECKING([for coqdep])
if test ! "$COQDEP"; then COQDEP=`which ${COQBIN}coqdep`; fi
AC_MSG_RESULT([$COQDEP])

AC_ARG_VAR(COQEXTRAFLAGS, [extra flags passed to Coq compiler [empty]])

AC_ARG_VAR(OCAMLFIND, [OCaml package manager [ocamlfind]])
AC_MSG_CHECKING([for ocamlfind])
if test ! "$OCAMLFIND"; then
  OCAMLFIND=`$COQC -config | sed -n -e 's/^OCAMLFIND=\(.*\)/\1/p'`
  if test ! "$OCAMLFIND"; then OCAMLFIND=ocamlfind; fi
  OCAMLFIND=`which $OCAMLFIND`
fi
AC_MSG_RESULT([$OCAMLFIND])
if test ! "$OCAMLFIND"; then OCAMLFIND=ocamlfind; fi

AC_MSG_CHECKING([for Flocq >= 3.0])
AS_IF(
  [ echo "Require Import Flocq.Version BinNat." \
         "Goal (30000 <= Flocq_version)%N. easy. Qed." > conftest.v
    $COQC conftest.v > conftest.err ],
  [ AC_MSG_RESULT([yes]) ],
  [ AC_MSG_RESULT([no])
    AC_MSG_ERROR([ *** Unable to find library Flocq >= 3.0 (http://flocq.gforge.inria.fr/)])])
rm -f conftest.v conftest.vo conftest.err

AC_SUBST(COQLIB)
COQLIB=`$COQC -where | tr -d '\r' | tr '\\\\' '/'`

AC_ARG_VAR(COQUSERCONTRIB, [installation directory [`$COQC -where`/user-contrib]])

if test -z "$COQUSERCONTRIB"; then
  COQUSERCONTRIB="$COQLIB/user-contrib"
fi

AC_ARG_ENABLE([tactic],
  AS_HELP_STRING([--disable-tactic], [do not compile a "gappa" tactic]),
  [if test "$enable_tactic" = "no"; then native_tactic=no ; byte_tactic=no ; fi], [])

AC_ARG_ENABLE([native-tactic],
  AS_HELP_STRING([--disable-native-tactic], [do not compile a native "gappa" tactic]),
  [if test "$enable_native_tactic" = "no"; then native_tactic=no ; fi], [])

AC_ARG_ENABLE([byte-tactic],
  AS_HELP_STRING([--disable-byte-tactic], [do not compile a bytecode "gappa" tactic]),
  [if test "$enable_byte_tactic" = "no"; then byte_tactic=no ; fi], [])

AX_VERSION_GE([$COQVERSION], [81300],
  [ BIGINTPKG=zarith
    BIGINTMOD=Big_int_Z ],
  [ BIGINTPKG=num
    BIGINTMOD=Big_int ])
AC_SUBST(BIGINTPKG)

if test "$native_tactic" = yes; then
  AC_MSG_CHECKING([for native development files])
  AS_IF(
    [ echo "let _ = (Evd.empty, $BIGINTMOD.zero_big_int)" > conftest.ml
      $OCAMLFIND ocamlopt -rectypes -thread -package coq.engine -package $BIGINTPKG -shared conftest.ml -o conftest.cmxs ],
    [ AC_MSG_RESULT(yes) ],
    [ AC_MSG_RESULT(no)
      AC_MSG_ERROR([ *** Failed to compile a native OCaml library ]) ])
fi

if test "$byte_tactic" = yes; then
  AC_MSG_CHECKING([for bytecode development files])
  AS_IF(
    [ echo "let _ = (Evd.empty, $BIGINTMOD.zero_big_int)" > conftest.ml
      $OCAMLFIND ocamlc -rectypes -thread -package coq.engine -package $BIGINTPKG -c conftest.ml -o conftest.cmo ],
    [ AC_MSG_RESULT(yes) ],
    [ AC_MSG_RESULT(no)
      AC_MSG_ERROR([ *** Failed to compile a bytecode OCaml library ]) ])
fi

rm -f conftest.ml conftest.cm*

AC_ARG_VAR(REMAKE, [Remake [vendored version]])

if test -z "$REMAKE"; then
AC_PROG_CXX

AC_MSG_NOTICE([building remake...])
case `$CXX -v 2>&1 | grep -e "^Target:"` in
*mingw*)
	$CXX -Wall -O2 -o remake.exe remake.cpp -lws2_32
	if test $? != 0; then AC_MSG_FAILURE([failed]); fi
	REMAKE=./remake.exe
	;;
*)
	$CXX -Wall -O2 -o remake remake.cpp
	if test $? != 0; then AC_MSG_FAILURE([failed]); fi
	REMAKE=./remake
	;;
esac
fi

AC_SUBST(TACTIC_TARGETS)
AC_SUBST(TACTIC_PARAM)

tactic_mode=""
if test "$native_tactic" = yes; then
  tactic_mode="$tactic_mode native"
  TACTIC_TARGETS="$TACTIC_TARGETS gappatac.cmxs"
  if test "$byte_tactic" = no; then
    TACTIC_PARAM="-opt"
  fi
fi
if test "$byte_tactic" = yes; then
  tactic_mode="$tactic_mode bytecode"
  TACTIC_TARGETS="$TACTIC_TARGETS gappatac.cmo"
  if test "$native_tactic" = no; then
    TACTIC_PARAM="-byte"
  fi
fi

if test -z "$tactic_mode"; then tactic_mode=" none"; fi

echo
echo "=== Summary ==="
echo "Installation directory   $COQUSERCONTRIB"
echo "Gappa tactic            $tactic_mode"
echo

AC_CONFIG_FILES(Remakefile)
AC_OUTPUT
